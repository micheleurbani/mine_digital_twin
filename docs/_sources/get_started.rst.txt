===========
Get Started
===========

Python Setup
============

As far as I tested, no installation of Python on the user OS should be necessary. A Python virtualenvironment is already present in the local folder `venv` with all the packages required to run the simulation.

MatLab Interface
================

The integration between MatLab and Python was subject to major updates starting from MatLab 2019a, therefore it is warmly suggested to use MatLab 2019a or later.
The first thing to do when we want to call Python scripts from MatLab is to clear the workspace from old variables and to specify the virtual environment we want to work with.
It is possible to specify the Python interpreter only once per MatLab session, i.e. when you run your script a second time MatLab will raise an error unless you comment the function *pyenv()* or, better, you use the following snippet, which automatically detects the presence of a Python interpreter.
Due to this hallmark of MatLab, whenever you modify a Python script that you want to use in MatLab, it is required to restart MatLab.

.. highlight:: matlab

::

    clear; close all; clc;

    if exist("pe", "var")
        % Retrieve the path of the local folder
        localFolder = pwd;
        % Provide local python environment (important because required
        % libraries are installed there).
        pe = pyenv("Version",strcat(localFolder,"/venv/Scripts/python.exe"));
    end

Declaration of Simulation Parameters
------------------------------------

Simulation paramters are specified using a MatLab *struct* data type.
It is possible to specify the following parameters:

+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|Name        |Data Type |Description                                                                                                        |
+============+==========+===================================================================================================================+
|shovelPolicy|Array     |It contains threshold values for maintenance of shovels.                                                           |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|truckPolicy |Array     |It contains threshold values for maintenance of trucks.                                                            |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|nShovels    |int       |The number of in the mine.                                                                                         |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|nTrucks     |int       |The number of in the mine.                                                                                         |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|nDumpSites  |int       |The number of in the mine.                                                                                         |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|nWorkShops  |int       |The number of in the mine.                                                                                         |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|simTime     |int       |The length of the simulation horizon [minutes].                                                                    |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|seed        |int       |An arbitrary value to allow replication of the experiment. If it is left blank, a random value will be assigned.   |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+
|PMRule      |str       |The name of the policy used to decide whether to perform preventive maintenance.                                   |
+------------+----------+-------------------------------------------------------------------------------------------------------------------+

An example of parameter declaration is the following.

.. highlight:: matlab

::

    % Create a struct variable where to store simulation parameters
    param = struct();
    % Declare shovel policy
    param.shovelPolicy = [2734.068, 2815.389, 3340.196];
    % Declare truck policy
    param.truckPolicy = [1122.016, 2795.403, 627.217, 2434.159, 1835.745, 1060.458, 662.486, 1010.808, 659.963, 2813.513];

    % Specify how many items are present in the mine
    param.nShovels = length(param.shovelPolicy);
    param.nTrucks = length(param.truckPolicy);
    param.nDumpSites = 2;
    param.nWorkShops = 2;
    param.PMRule = "age_based"

    param.simTime = 100000;     % Length of thesimulation [minutes]
    param.seed = 42;            % A value for the seed

Run a Simulation Experiment
---------------------------

Before to run a simulation we need to convert the variable *param* to JSON format.
This step allows to simplify the communication between MatLab and Python, which othrewise would require to convert MatLab data types to Python data types.
Since the values that are passed to Python are only integer and float types, they can be easily read by Python.

.. highlight:: matlab

::

    % Encode the struct using JSON format
    json_format = jsonencode(param);

    % Unconmment the following code in case you need to save the parameters in
    % JSON format to an external file
    fid = fopen("param.json", "w");

    if fid == -1
        error("Cannot create JSON file");
    end

    fwrite(fid, json_format, "char");
    fclose(fid);

The simulation is finally run by calling the function *std* from the module *main.py*.
The output of the function is a Python tuple containing the results of the experiment and the parameters required to restart the simulation, both in a JSON format.
The tuple must be casted into a MatLab cell array using the function *cell()*.
Each of the fields of the cell contains a Python string, which in turn must be converted in a MatLab string and subsequently decoded by MatLab.
String casting is performed using the function *string()* and decoding is performed using *jsondecode()*.

.. highlight:: matlab

::

    output = cell(py.main.std(param));

    experiment_results = jsondecode(string(output{1}));
    items_status = jsondecode(string(output{2}));

You can change some parameters, e.g. maintenance thresholds, and restart the experiment from the point when it was stopped.

.. highlight:: matlab

::

    % Update the initial time and change the seed (or left it blank)
    param.initialTime = param.simTime;
    param.seed = [];
    % You can also change maintenance policies
    param.shovelPolicy = [0.08, 0.06, 0.035];

    % For the new run of the experiment the status of the items has to be provided
    output = py.main.std(param, items_status);


Results Extraction
------------------

Results and statistics are contained in the variable *results* and can be extracted by accessing its attributes..

The meaning of the statistics enclosed in the output variables is explained in the Section :doc:`Logging and Statistics<./logging>`.
