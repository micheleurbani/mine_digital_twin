.. _get_started:

===========
Get Started
===========

Python Setup
============

As far as I tested, no installation of Python on the user OS should be necessary. A Python virtualenvironment is already present in the local folder `venv` with all the packages required to run the simulation.

The MatLab script calls the local virtualenvironment autonomously.

.. highlight:: matlab

::

    clear; close all; clc

If a Python environment has not been specified, provide indications.::

    if exist('pe', 'var')
        % Retrieve the path of the local folder
        localFolder = pwd;
        % Provide local python environment (important because required
        % libraries are installed there).
        pe = pyenv('Version',strcat(localFolder,'/venv/Scripts/python.exe'));
    end

The thresholds for decisions about preventive maintenance are provided as arrays.::

    shovelPolicy = [0.004, 0.008, 0.006];
    truckPolicy = [0.03,0.03,0.05,0.03,0.03,0.05,0.03,0.03,0.03,0.03];
    SIM_TIME = 5600;
    SEED = 42;

    % Call the function `sim` to run the simulation.
    output = sim(shovelPolicy,truckPolicy,SIM_TIME,SEED);

.. function:: sim(shovelPolicy,truckPolicy,SIM_TIME,SEED)

    SIM function call a MatLab interpreter and execute a single simulation experiment using the parameters provided below. Function variables include:

    :param array shovelPolicy: an array with length from 1 to 4 where the thresholds to trigger preventive maintenance are stored.
    :param array truckPolicy: an array with length from 1 to 30 where the thresholds to trigger preventive maintenance are stored.
    :param int SIM_TIME: the length of the simulation horizon.
    :param int SEED: a value provided for reproducibility of the simulation instance.
    :return: a variable of the type *struct* containing the results of the simulation
    :rtype: struct

More parameters about the simulation experiment are provided to the Python interpreter by means of dictionary. Those parameters are the number of dumpsites and the number of workshops.
Parameters which define the behaviour of trucks, shovels, dumpsites, and workshops are defined in the relative files within the folder "data".

The function returns a strucs with the number of corrective and preventive interventions, and the stockpiles level histories.::

    function output = sim(shovelPolicy,truckPolicy,SIM_TIME,SEED)
        % Specify parameters
        param = py.dict(...
            pyargs(...
            'nTrucks', int32(length(truckPolicy)), ...      % Between 1 and 30
            'nShovels', int32(length(shovelPolicy)), ...    % Between 1 and 4
            'nDumpSites', int32(2), ...                     % Between 1 and 5
            'nWorkShops', int32(2), ...                     % Between 1 and 3
            'SIM_TIME', int32(SIM_TIME), ...                % One year expressed in minutes
            'SEED', int32(SEED), ...
            'thresholdsPM', py.dict(...
                pyargs(...
                    'shovels', py.list(shovelPolicy), ...
                    'trucks', py.list(truckPolicy) ...
                )...
            )...
        ));

        output = py.main.std(param);

Simulation results are delivered as a MatLab struct datetype. Conversion of Python datatypes to MatLab may result a little bit tricky at a first sight, therefore I omit to explain data conversion from Python here and I suggest to look only to the final result, namely to the `output` struct, which can be navigated easily.

MatLab Interface
================

The script ``simulation.m`` shows how to call the Python script from MatLab environment. In the following we comment line by line how the script works.
